package cn.gdrfgdrf.ConnectComputerServer.Result;

import lombok.Getter;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

/**
 * @author gdrfgdrf
 */
public enum MessageEnum {
    AVAILABLE_SERVER,

    SUCCESS_GET,
    SUCCESS_LOGIN,
    SUCCESS_LOGOUT,
    SUCCESS_CHANGE_PASSWORD,
    SUCCESS_CHANGE,
    SUCCESS_SWITCH,

    SUCCESS_UPLOAD_FILE,

    ERROR_FILE_TOO_BIG,
    ERROR_INCORRECT_FILE_TYPE,
    ERROR_UPLOAD_FILE,

    ERROR_NOT_FOUND_USER,

    ERROR_CLIENT_VERSION_ILLEGAL,
    ERROR_NOT_FOUND_CLIENT_VERSION_IN_HEADER,
    ERROR_NOT_FOUND_TOKEN_IN_HEADER,
    ERROR_NOT_FOUND_PUBLIC_KEY_IN_HEADER,
    ERROR_TOKEN_INVALID,
    ERROR_TOKEN_EXPIRED,

    ERROR_ID_ILLEGAL,
    ERROR_USERNAME_ILLEGAL,
    ERROR_PASSWORD_ILLEGAL,
    ERROR_DISPLAY_NAME_ILLEGAL,

    ERROR_USERNAME_OUT_OF_LIMITED,
    ERROR_PASSWORD_OUT_OF_LIMITED,
    ERROR_DISPLAY_NAME_OUT_OF_LIMITED,

    ERROR_PASSWORD_INCORRECT_OR_NOT_FOUND_USER,
    ERROR_ORIGINAL_PASSWORD_INCORRECT,

    ERROR_PARAMETER,
    ERROR_ID_CANNOT_BE_NULL,
    ERROR_USERNAME_CANNOT_BE_NULL,
    ERROR_PASSWORD_CANNOT_BE_NULL,
    ERROR_ORIGINAL_PASSWORD_CANNOT_BE_NULL,

    ERROR_RSA_KEY,
    ERROR_DECRYPTED,

    NETTY_LOGIN_SUCCESS,

    NETTY_REGISTER_COMPUTER_SUCCESS,
    NETTY_ALREADY_REGISTER_COMPUTER,

    NETTY_CONNECT_COMPUTER_SUCCESS,
    NETTY_COMPUTER_IS_CONNECTED,
    NETTY_CONTROLLER_DISCONNECTED,
    NETTY_COMPUTER_DISCONNECTED,

    NETTY_COMPUTER_ONLINE,
    NETTY_COMPUTER_OFFLINE,

    NETTY_AES_KEY_IS_GENERATED,
    NETTY_AES_KEY_HAS_BEEN_GENERATED,
    NETTY_AES_KEY_HAS_NOT_BEEN_GENERATED,

    NETTY_CONTROLLER_EXCHANGE_RSA_KEY,
    NETTY_COMPUTER_EXCHANGE_RSA_KEY,
    NETTY_CONTROLLER_ENCRYPTED_MESSAGE,
    NETTY_COMPUTER_ENCRYPTED_MESSAGE,

    NETTY_CONTROLLER_KEY_PRESSED,
    NETTY_CONTROLLER_KEY_TYPED,
    NETTY_CONTROLLER_REQUEST,
    NETTY_COMPUTER_RESPONSE,
    NETTY_CONTROLLER_TERMINAL_CLOSED,
    NETTY_COMPUTER_TERMINAL_CLOSED,

    NETTY_COMPUTER_NOT_ONLINE,

    NETTY_NEED_LOGIN,
    NETTY_ALREADY_LOGIN,

    NETTY_LOGIN_MODE_IS_NOT_COMPUTER,
    NETTY_LOGIN_MODE_IS_NOT_CONTROLLER,
    NETTY_CONTROLLER_IS_CONTROLLING,
    NETTY_CONTROLLER_IS_NOT_CONTROLLING,
    NETTY_COMPUTER_IS_NOT_CONTROLLED,
    NETTY_ONLY_SINGLE_CONNECTION,
    NETTY_CONTROLLER_IS_NOT_EXCHANGE_RSA_KEY,
    NETTY_COMPUTER_IS_NOT_EXCHANGE_RSA_KEY,
    NETTY_CONTROLLER_ALREADY_EXCHANGED_RSA_KEY,
    NETTY_COMPUTER_ALREADY_EXCHANGED_RSA_KEY,

    NETTY_FORCED_OFFLINE,

    NETTY_NOT_FOUND_COMPUTER,

    NETTY_TIMEOUT,
    NETTY_GOODBYE,

    NETTY_CLIENT_VERSION_TOO_LOW,
    VERSION_TOO_LOW,

    VALIDATION_NOT_NULL,
    VALIDATION_NOT_BLANK,
    VALIDATION_MAX,
    VALIDATION_PATTERN,
    VALIDATION_ONLY_INTEGER,
    VALIDATION_POSITIVE_OR_NEGATIVE,

    POSITIVE,
    NEGATIVE,

    ERROR,
    ERROR_HTTP_MESSAGE_NOT_READABLE,
    ERROR_CRYPT,
    UNKNOWN_LANGUAGE;

    @Getter
    private static final Map<String, MessageEnum> MAP = new ConcurrentHashMap<>();

    public static String getMessage(MessageEnum messages) {
        switch (messages) {
            case AVAILABLE_SERVER: return LanguageLoader.MESSAGES.AVAILABLE_SERVER;

            case SUCCESS_GET: return LanguageLoader.MESSAGES.SUCCESS_GET;
            case SUCCESS_LOGIN: return LanguageLoader.MESSAGES.SUCCESS_LOGIN;
            case SUCCESS_LOGOUT: return LanguageLoader.MESSAGES.SUCCESS_LOGOUT;
            case SUCCESS_CHANGE_PASSWORD: return LanguageLoader.MESSAGES.SUCCESS_CHANGE_PASSWORD;
            case SUCCESS_CHANGE: return LanguageLoader.MESSAGES.SUCCESS_CHANGE;
            case SUCCESS_SWITCH: return LanguageLoader.MESSAGES.SUCCESS_SWITCH;

            case SUCCESS_UPLOAD_FILE: return LanguageLoader.MESSAGES.SUCCESS_UPLOAD_FILE;

            case ERROR_FILE_TOO_BIG: return LanguageLoader.MESSAGES.ERROR_FILE_TOO_BIG;
            case ERROR_INCORRECT_FILE_TYPE: return LanguageLoader.MESSAGES.ERROR_INCORRECT_FILE_TYPE;
            case ERROR_UPLOAD_FILE: return LanguageLoader.MESSAGES.ERROR_UPLOAD_FILE;

            case ERROR_NOT_FOUND_USER: return LanguageLoader.MESSAGES.ERROR_NOT_FOUND_USER;

            case ERROR_CLIENT_VERSION_ILLEGAL: return LanguageLoader.MESSAGES.ERROR_CLIENT_VERSION_ILLEGAL;
            case ERROR_NOT_FOUND_CLIENT_VERSION_IN_HEADER: return LanguageLoader.MESSAGES.ERROR_NOT_FOUND_CLIENT_VERSION_IN_HEADER;
            case ERROR_NOT_FOUND_TOKEN_IN_HEADER: return LanguageLoader.MESSAGES.ERROR_NOT_FOUND_TOKEN_IN_HEADER;
            case ERROR_NOT_FOUND_PUBLIC_KEY_IN_HEADER: return LanguageLoader.MESSAGES.ERROR_NOT_FOUND_PUBLIC_KEY_IN_HEADER;
            case ERROR_TOKEN_INVALID: return LanguageLoader.MESSAGES.ERROR_TOKEN_INVALID;
            case ERROR_TOKEN_EXPIRED: return LanguageLoader.MESSAGES.ERROR_TOKEN_EXPIRED;

            case ERROR_PARAMETER: return LanguageLoader.MESSAGES.ERROR_PARAMETER;
            case ERROR_ID_ILLEGAL: return LanguageLoader.MESSAGES.ERROR_ID_ILLEGAL;
            case ERROR_USERNAME_ILLEGAL: return LanguageLoader.MESSAGES.ERROR_USERNAME_ILLEGAL;
            case ERROR_PASSWORD_ILLEGAL: return LanguageLoader.MESSAGES.ERROR_PASSWORD_ILLEGAL;
            case ERROR_DISPLAY_NAME_ILLEGAL: return LanguageLoader.MESSAGES.ERROR_DISPLAY_NAME_ILLEGAL;

            case ERROR_USERNAME_OUT_OF_LIMITED: return LanguageLoader.MESSAGES.ERROR_USERNAME_OUT_OF_LIMITED;
            case ERROR_PASSWORD_OUT_OF_LIMITED: return LanguageLoader.MESSAGES.ERROR_PASSWORD_OUT_OF_LIMITED;
            case ERROR_DISPLAY_NAME_OUT_OF_LIMITED: return LanguageLoader.MESSAGES.ERROR_DISPLAY_NAME_OUT_OF_LIMITED;

            case ERROR_PASSWORD_INCORRECT_OR_NOT_FOUND_USER: return LanguageLoader.MESSAGES.ERROR_PASSWORD_INCORRECT_OR_NOT_FOUND_USER;
            case ERROR_ORIGINAL_PASSWORD_INCORRECT: return LanguageLoader.MESSAGES.ERROR_ORIGINAL_PASSWORD_INCORRECT;

            case ERROR_ID_CANNOT_BE_NULL: return LanguageLoader.MESSAGES.ERROR_ID_CANNOT_BE_NULL;
            case ERROR_USERNAME_CANNOT_BE_NULL: return LanguageLoader.MESSAGES.ERROR_USERNAME_CANNOT_BE_NULL;
            case ERROR_PASSWORD_CANNOT_BE_NULL: return LanguageLoader.MESSAGES.ERROR_PASSWORD_CANNOT_BE_NULL;
            case ERROR_ORIGINAL_PASSWORD_CANNOT_BE_NULL: return LanguageLoader.MESSAGES.ERROR_ORIGINAL_PASSWORD_CANNOT_BE_NULL;

            case ERROR_RSA_KEY: return LanguageLoader.MESSAGES.ERROR_RSA_KEY;
            case ERROR_DECRYPTED: return LanguageLoader.MESSAGES.ERROR_DECRYPTED;

            case NETTY_LOGIN_SUCCESS: return LanguageLoader.MESSAGES.NETTY_LOGIN_SUCCESS;

            case NETTY_REGISTER_COMPUTER_SUCCESS: return LanguageLoader.MESSAGES.NETTY_REGISTER_COMPUTER_SUCCESS;
            case NETTY_ALREADY_REGISTER_COMPUTER: return LanguageLoader.MESSAGES.NETTY_ALREADY_REGISTER_COMPUTER;

            case NETTY_CONNECT_COMPUTER_SUCCESS: return LanguageLoader.MESSAGES.NETTY_CONNECT_COMPUTER_SUCCESS;
            case NETTY_COMPUTER_IS_CONNECTED: return LanguageLoader.MESSAGES.NETTY_COMPUTER_IS_CONNECTED;
            case NETTY_CONTROLLER_DISCONNECTED: return LanguageLoader.MESSAGES.NETTY_CONTROLLER_DISCONNECTED;
            case NETTY_COMPUTER_DISCONNECTED: return LanguageLoader.MESSAGES.NETTY_COMPUTER_DISCONNECTED;

            case NETTY_COMPUTER_ONLINE: return LanguageLoader.MESSAGES.NETTY_COMPUTER_ONLINE;
            case NETTY_COMPUTER_OFFLINE: return LanguageLoader.MESSAGES.NETTY_COMPUTER_OFFLINE;

            case NETTY_AES_KEY_IS_GENERATED: return LanguageLoader.MESSAGES.NETTY_AES_KEY_IS_GENERATED;
            case NETTY_AES_KEY_HAS_BEEN_GENERATED: return LanguageLoader.MESSAGES.NETTY_AES_KEY_HAS_BEEN_GENERATED;
            case NETTY_AES_KEY_HAS_NOT_BEEN_GENERATED: return LanguageLoader.MESSAGES.NETTY_AES_KEY_HAS_NOT_BEEN_GENERATED;

            case NETTY_CONTROLLER_EXCHANGE_RSA_KEY: return LanguageLoader.MESSAGES.NETTY_CONTROLLER_EXCHANGE_RSA_KEY;
            case NETTY_COMPUTER_EXCHANGE_RSA_KEY: return LanguageLoader.MESSAGES.NETTY_COMPUTER_EXCHANGE_RSA_KEY;
            case NETTY_CONTROLLER_ENCRYPTED_MESSAGE: return LanguageLoader.MESSAGES.NETTY_CONTROLLER_ENCRYPTED_MESSAGE;
            case NETTY_COMPUTER_ENCRYPTED_MESSAGE: return LanguageLoader.MESSAGES.NETTY_COMPUTER_ENCRYPTED_MESSAGE;

            case NETTY_CONTROLLER_KEY_PRESSED: return LanguageLoader.MESSAGES.NETTY_CONTROLLER_KEY_PRESSED;
            case NETTY_CONTROLLER_KEY_TYPED: return LanguageLoader.MESSAGES.NETTY_CONTROLLER_KEY_TYPED;
            case NETTY_CONTROLLER_REQUEST: return LanguageLoader.MESSAGES.NETTY_CONTROLLER_REQUEST;
            case NETTY_COMPUTER_RESPONSE: return LanguageLoader.MESSAGES.NETTY_COMPUTER_RESPONSE;
            case NETTY_CONTROLLER_TERMINAL_CLOSED: return LanguageLoader.MESSAGES.NETTY_CONTROLLER_TERMINAL_CLOSED;
            case NETTY_COMPUTER_TERMINAL_CLOSED: return LanguageLoader.MESSAGES.NETTY_COMPUTER_TERMINAL_CLOSED;

            case NETTY_COMPUTER_NOT_ONLINE: return LanguageLoader.MESSAGES.NETTY_COMPUTER_NOT_ONLINE;

            case NETTY_NEED_LOGIN: return LanguageLoader.MESSAGES.NETTY_NEED_LOGIN;
            case NETTY_ALREADY_LOGIN: return LanguageLoader.MESSAGES.NETTY_ALREADY_LOGIN;

            case NETTY_LOGIN_MODE_IS_NOT_COMPUTER: return LanguageLoader.MESSAGES.NETTY_LOGIN_MODE_IS_NOT_COMPUTER;
            case NETTY_LOGIN_MODE_IS_NOT_CONTROLLER: return LanguageLoader.MESSAGES.NETTY_LOGIN_MODE_IS_NOT_CONTROLLER;
            case NETTY_CONTROLLER_IS_CONTROLLING: return LanguageLoader.MESSAGES.NETTY_CONTROLLER_IS_CONTROLLING;
            case NETTY_CONTROLLER_IS_NOT_CONTROLLING: return LanguageLoader.MESSAGES.NETTY_CONTROLLER_IS_NOT_CONTROLLING;
            case NETTY_COMPUTER_IS_NOT_CONTROLLED: return LanguageLoader.MESSAGES.NETTY_COMPUTER_IS_NOT_CONTROLLED;
            case NETTY_ONLY_SINGLE_CONNECTION: return LanguageLoader.MESSAGES.NETTY_ONLY_SINGLE_CONNECTION;
            case NETTY_CONTROLLER_IS_NOT_EXCHANGE_RSA_KEY: return LanguageLoader.MESSAGES.NETTY_CONTROLLER_IS_NOT_EXCHANGE_RSA_KEY;
            case NETTY_COMPUTER_IS_NOT_EXCHANGE_RSA_KEY: return LanguageLoader.MESSAGES.NETTY_COMPUTER_IS_NOT_EXCHANGE_RSA_KEY;
            case NETTY_CONTROLLER_ALREADY_EXCHANGED_RSA_KEY: return LanguageLoader.MESSAGES.NETTY_CONTROLLER_ALREADY_EXCHANGED_RSA_KEY;
            case NETTY_COMPUTER_ALREADY_EXCHANGED_RSA_KEY: return LanguageLoader.MESSAGES.NETTY_COMPUTER_ALREADY_EXCHANGED_RSA_KEY;

            case NETTY_FORCED_OFFLINE: return LanguageLoader.MESSAGES.NETTY_FORCED_OFFLINE;

            case NETTY_NOT_FOUND_COMPUTER: return LanguageLoader.MESSAGES.NETTY_NOT_FOUND_COMPUTER;

            case NETTY_TIMEOUT: return LanguageLoader.MESSAGES.NETTY_TIMEOUT;
            case NETTY_GOODBYE: return LanguageLoader.MESSAGES.NETTY_GOODBYE;

            case NETTY_CLIENT_VERSION_TOO_LOW: return LanguageLoader.MESSAGES.NETTY_CLIENT_VERSION_TOO_LOW;
            case VERSION_TOO_LOW: return LanguageLoader.MESSAGES.VERSION_TOO_LOW;

            case VALIDATION_NOT_NULL: return LanguageLoader.MESSAGES.VALIDATION_NOT_NULL;
            case VALIDATION_NOT_BLANK: return LanguageLoader.MESSAGES.VALIDATION_NOT_BLANK;
            case VALIDATION_MAX: return LanguageLoader.MESSAGES.VALIDATION_MAX;
            case VALIDATION_PATTERN: return LanguageLoader.MESSAGES.VALIDATION_PATTERN;
            case VALIDATION_ONLY_INTEGER: return LanguageLoader.MESSAGES.VALIDATION_ONLY_INTEGER;
            case VALIDATION_POSITIVE_OR_NEGATIVE: return LanguageLoader.MESSAGES.VALIDATION_POSITIVE_OR_NEGATIVE;

            case POSITIVE: return LanguageLoader.MESSAGES.POSITIVE;
            case NEGATIVE: return LanguageLoader.MESSAGES.NEGATIVE;

            case ERROR: return LanguageLoader.MESSAGES.ERROR;
            case ERROR_CRYPT: return LanguageLoader.MESSAGES.ERROR_CRYPT;
            case ERROR_HTTP_MESSAGE_NOT_READABLE: return LanguageLoader.MESSAGES.ERROR_HTTP_MESSAGE_NOT_READABLE;

            default: return LanguageLoader.MESSAGES.UNKNOWN_LANGUAGE;
        }
    }

    @Override
    public String toString() {
        String message = getMessage(this);
        MAP.put(message, this);

        return message;
    }
}
